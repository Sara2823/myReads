{"version":3,"sources":["BooksAPI.js","bookShelf.js","search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","BookShelf","this","props","react_default","a","createElement","className","map","index","key","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","newShelf","updateShelf","target","disabled","title","Array","isArray","authors","author","Component","SearchBook","emptyQuery","react_router_dom","to","type","placeholder","string","searchQuery","bookShelf","filter","BooksApp","state","myBooks","filteredBooks","_this","setState","emptyLibrary","event","console","log","BooksAPI","searchResults","error","adjustedBooks","searchResult","forEach","undefined","updateLibrary","alert","updateSearch","_this2","_this3","react_router","path","exact","render","src_search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.81ea37f7.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res =>{res.json()})\n  \n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\n\nclass BookShelf extends Component {\n    render() {\n    const data = this.props;\n    return <div className=\"bookshelf\">\n    <h2 className=\"bookshelf-title\">{data.shelf}</h2>\n    <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n            {data.books.map((book, index) =>\n                <li key={index}>\n                    <div className=\"book\">\n                        <div className=\"book-top\">\n                            <div className=\"book-cover\" style={{ width: 128, height: 170, backgroundImage: book.imageLinks ? (`url(${book.imageLinks.thumbnail})`) : (`url(https://dummyimage.com/128x170/4f4f4f/ffffff.jpg&text=No+Book+Art)`) }}></div>\n                            <div className=\"book-shelf-changer\">\n                                <select value={book.shelf} onChange={(newShelf) => data.updateShelf(book, newShelf.target.value)}> \n                                    <option disabled>Move to...</option>\n                                    <option value=\"currentlyReading\">Currently reading</option>\n                                    <option value=\"wantToRead\">Want to read</option>\n                                    <option value=\"read\">Read</option>\n                                    <option value=\"none\">None</option>\n                                </select>\n                            </div>\n                        </div>\n                        <div className=\"book-title\">{book.title}</div>\n                        <div className=\"book-authors\">\n                            <ul>\n                            {Array.isArray(book.authors) && (\n                                book.authors.map((author, index)=>\n                                (<li key={index}>{author}</li>))\n                                \n                                )}\n                            </ul>\n                            </div>\n                    </div>\n                </li>\n            )}\n        </ol>\n    </div>\n</div>\n\n    }\n}\n\nexport default BookShelf","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport BookShelf from './bookShelf'\n\nclass SearchBook extends Component {\n    componentDidMount() {\n        this.props.emptyQuery()\n    }\n\n    render() {\n        const data = this.props;\n        return <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n\n\n                <Link className=\"close-search\" to=\"/\"> Close </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search by title or author\"\n                        value={data.books.string}\n                        onChange={data.searchQuery}\n                    />\n\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                <BookShelf updateShelf={data.updateShelf} shelf=\"My books\" books=\n                {data.books.filter(book => book.shelf === 'currentlyReading' || book.shelf === 'read' || book.shelf === 'wantToRead')} />\n\n                <BookShelf updateShelf={data.updateShelf} shelf=\"Discover!\" books={data.books.filter(book => book.shelf === 'none')} />\n            </div>\n        </div>\n    };\n};\n\nexport default SearchBook;","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Route, Link } from 'react-router-dom'\nimport './App.css'\nimport BookShelf from './bookShelf'\nimport SearchBook from './search'\n\nclass BooksApp extends React.Component {\n  state = {\n    myBooks :[], // wantToRead - currentlyReading - read\n    filteredBooks : [], // search filter (none - wantToRead - currentlyReading - read)\n    //showSearchPage: false\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then(myBooks => {\n        this.setState({ myBooks })\n        //this.emptyLibrary();\n        console.log(this.state.myBooks)\n    })\n}\n\n\n  componentDidUpdate(){\n    BooksAPI.getAll()\n  }\n\nemptyQuery = () => this.setState({ filteredBooks : []})\nemptyLibrary = () => this.setState({ myBooks : []})\n\nsearchQuery = (event) => {\n  const query = event.target.value\n  console.log(query)\n  if (query !== '') { \n    BooksAPI.search(query)\n    .then(searchResults => {\n      if (!searchResults || searchResults.error) {    \n        console.log(searchResults.error)\n        return\n      }\n   \n      const adjustedBooks = searchResults.map(searchResult => {\n          this.state.myBooks.forEach(book => {\n            \n            if (book.id === searchResult.id){searchResult.shelf = book.shelf; } // Check if the book is familiar\n            if (searchResult.shelf === undefined){searchResult.shelf = 'none'} //Add none-category to new books \n\n          })\n        return searchResult\n      })\n      \n      this.setState({ filteredBooks: adjustedBooks })\n    })\n  }\n}\n\n\nupdateLibrary = (book, newShelf) => {\n  BooksAPI.update(book, newShelf)\n  .then(() => {\n    BooksAPI.getAll()\n    .then(myBooks => {\n    this.setState({ myBooks })\n    })\n  })\n      .then(alert('Book shelf was updated'))\n}\n\nupdateSearch = (book, newShelf) => {\n  BooksAPI.update(book, newShelf)\n  .then(() => {\n    BooksAPI.getAll()\n    .then(filteredBooks => {\n    this.setState({ filteredBooks })\n    })\n  })\n      .then(alert('Book shelf was updated'))\n}\n\n\n  render() {\n    return (\n      <div className=\"app\">\n\n            <Route path=\"/search\" exact render={() => (\n            <SearchBook emptyQuery={this.emptyQuery} searchQuery={this.searchQuery} updateShelf={this.updateSearch} books={this.state.filteredBooks} />\n            )} />\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n\n            <Route path=\"/\" exact render={() => (\n            <div className=\"list-books-content\">\n              <BookShelf updateShelf={this.updateLibrary} shelf=\"Currently Reading\" books={this.state.myBooks.filter(book => book.shelf === 'currentlyReading')} />,\n              <BookShelf updateShelf={this.updateLibrary} shelf=\"Want to Read\" books={this.state.myBooks.filter(book => book.shelf === 'wantToRead')} />,\n              <BookShelf updateShelf={this.updateLibrary} shelf=\"Read\" books={this.state.myBooks.filter(book => book.shelf === 'read')} />,\n              <div >\n              <Link className=\"open-search\" to=\"/search\"> Add a book </Link>\n            </div>\n            </div>\n            \n            )} />\n            </div>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}